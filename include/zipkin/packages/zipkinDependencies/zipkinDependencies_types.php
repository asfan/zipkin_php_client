<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class Moments {
  static $_TSPEC;

  public $m0 = null;
  public $m1 = null;
  public $m2 = null;
  public $m3 = null;
  public $m4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'm0',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'm1',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'm2',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'm3',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'm4',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['m0'])) {
        $this->m0 = $vals['m0'];
      }
      if (isset($vals['m1'])) {
        $this->m1 = $vals['m1'];
      }
      if (isset($vals['m2'])) {
        $this->m2 = $vals['m2'];
      }
      if (isset($vals['m3'])) {
        $this->m3 = $vals['m3'];
      }
      if (isset($vals['m4'])) {
        $this->m4 = $vals['m4'];
      }
    }
  }

  public function getName() {
    return 'Moments';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->m0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->m1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->m2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->m3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->m4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Moments');
    if ($this->m0 !== null) {
      $xfer += $output->writeFieldBegin('m0', TType::I64, 1);
      $xfer += $output->writeI64($this->m0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->m1 !== null) {
      $xfer += $output->writeFieldBegin('m1', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->m1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->m2 !== null) {
      $xfer += $output->writeFieldBegin('m2', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->m2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->m3 !== null) {
      $xfer += $output->writeFieldBegin('m3', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->m3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->m4 !== null) {
      $xfer += $output->writeFieldBegin('m4', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->m4);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DependencyLink {
  static $_TSPEC;

  public $parent = null;
  public $child = null;
  public $duration_moments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parent',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'child',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'duration_moments',
          'type' => TType::STRUCT,
          'class' => 'Moments',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parent'])) {
        $this->parent = $vals['parent'];
      }
      if (isset($vals['child'])) {
        $this->child = $vals['child'];
      }
      if (isset($vals['duration_moments'])) {
        $this->duration_moments = $vals['duration_moments'];
      }
    }
  }

  public function getName() {
    return 'DependencyLink';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->child);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->duration_moments = new Moments();
            $xfer += $this->duration_moments->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DependencyLink');
    if ($this->parent !== null) {
      $xfer += $output->writeFieldBegin('parent', TType::STRING, 1);
      $xfer += $output->writeString($this->parent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->child !== null) {
      $xfer += $output->writeFieldBegin('child', TType::STRING, 2);
      $xfer += $output->writeString($this->child);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duration_moments !== null) {
      if (!is_object($this->duration_moments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('duration_moments', TType::STRUCT, 3);
      $xfer += $this->duration_moments->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Dependencies {
  static $_TSPEC;

  public $start_time = null;
  public $end_time = null;
  public $links = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'links',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'DependencyLink',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['links'])) {
        $this->links = $vals['links'];
      }
    }
  }

  public function getName() {
    return 'Dependencies';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->links = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new DependencyLink();
              $xfer += $elem5->read($input);
              $this->links []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Dependencies');
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 1);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 2);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->links !== null) {
      if (!is_array($this->links)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('links', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->links));
        {
          foreach ($this->links as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
